/******************************************************************************/
/****         Generated by IBExpert 2006.12.13 25.06.2021 18:07:28         ****/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1251;

CREATE DATABASE '192.168.0.3:D:\DB\BASE_TESTING.FDB'
USER 'STUDENT' PASSWORD 'edu-759'
PAGE_SIZE 16384
DEFAULT CHARACTER SET WIN1251;



/******************************************************************************/
/****                              Generators                              ****/
/******************************************************************************/

CREATE GENERATOR GEN_ANSWERS_ID;
SET GENERATOR GEN_ANSWERS_ID TO 390;

CREATE GENERATOR GEN_GROUPS_ID;
SET GENERATOR GEN_GROUPS_ID TO 11;

CREATE GENERATOR GEN_QUESTIONS_ID;
SET GENERATOR GEN_QUESTIONS_ID TO 101;

CREATE GENERATOR GEN_REGISTRATION_ID;
SET GENERATOR GEN_REGISTRATION_ID TO 1;

CREATE GENERATOR GEN_STUDENTS_ID;
SET GENERATOR GEN_STUDENTS_ID TO 30;

CREATE GENERATOR GEN_SUBJECTS_ID;
SET GENERATOR GEN_SUBJECTS_ID TO 14;

CREATE GENERATOR GEN_TEACHERS_ID;
SET GENERATOR GEN_TEACHERS_ID TO 33;

CREATE GENERATOR GEN_TESTING_ID;
SET GENERATOR GEN_TESTING_ID TO 8;

CREATE GENERATOR GEN_TEST_T_ID;
SET GENERATOR GEN_TEST_T_ID TO 81;

CREATE GENERATOR GEN_THEME_T_ID;
SET GENERATOR GEN_THEME_T_ID TO 75;



SET TERM ^ ; 



/******************************************************************************/
/****                          Stored Procedures                           ****/
/******************************************************************************/

CREATE PROCEDURE CHECK_BO (
    ID_STUDENT INTEGER)
RETURNS (
    USED INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CHECK_GRO (
    ID_GROUP INTEGER)
RETURNS (
    USED INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CHECK_PRE (
    ID_TEACHER INTEGER)
RETURNS (
    USED INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CHECK_SUB (
    ID_SUBJECT INTEGER)
RETURNS (
    USED INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_GEN_ANSWERS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_GEN_GROUPS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_GEN_QUESTIONS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_GEN_STUDENTS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_GEN_SUBJECTS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_GEN_TEACHERS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_GEN_TEST_T_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_GEN_THEME_T_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^



SET TERM ; ^


/******************************************************************************/
/****                                Tables                                ****/
/******************************************************************************/



CREATE TABLE ANSWERS (
    ID_ANSWER     INTEGER NOT NULL,
    ANSWER        VARCHAR(50),
    TRUE_ANSWER   SMALLINT,
    ID_QUESTIONS  INTEGER
);

CREATE TABLE GROUPS (
    ID_GROUP    INTEGER NOT NULL,
    NAME_GROUP  VARCHAR(10)
);

CREATE TABLE QUESTIONS (
    ID_QUESTION  INTEGER NOT NULL,
    ID_TEST      INTEGER,
    QUESTION     VARCHAR(1000)
);

CREATE TABLE REGISTRATION (
    ID_REGISTRATION  INTEGER NOT NULL,
    START_TIME       TIME,
    END_TIME         TIME,
    THE_DATE_OF_THE  DATE,
    ID_STUDENT       INTEGER
);

CREATE TABLE STUDENTS (
    ID_STUDENT          INTEGER NOT NULL,
    SURNAME_STUDENT     VARCHAR(15),
    NAME_STUDENT        VARCHAR(15),
    PATRONYMIC_STUDENT  VARCHAR(15),
    LOGIN               VARCHAR(20),
    PASSWORDD           VARCHAR(20),
    ID_GROUP            INTEGER
);

CREATE TABLE SUBJECTS (
    ID_SUBJECT  INTEGER NOT NULL,
    SUBJECT     VARCHAR(30),
    ID_TEACHER  INTEGER
);

CREATE TABLE TEACHERS (
    ID_TEACHER          INTEGER NOT NULL,
    SURNAME_TEACHER     VARCHAR(15),
    NAME_TEACHER        VARCHAR(15),
    PATRONYMIC_TEACHER  VARCHAR(15),
    LOGIN               VARCHAR(20),
    PASSWORDD           VARCHAR(20)
);

CREATE TABLE TEST_T (
    TEST_T     INTEGER NOT NULL,
    NAME_TEST  VARCHAR(30),
    ID_THEME   INTEGER
);

CREATE TABLE TESTING (
    ID_TESTING       INTEGER NOT NULL,
    ID_REGISTRATION  INTEGER,
    ID_TEST          INTEGER,
    ID_ANSWER        INTEGER
);

CREATE TABLE THEME_T (
    ID_THEME    INTEGER NOT NULL,
    NAME_THEME  VARCHAR(50),
    ID_SUBJECT  INTEGER
);

INSERT INTO SUBJECTS (ID_SUBJECT, SUBJECT, ID_TEACHER) VALUES (1, 'Математика', 1);
INSERT INTO SUBJECTS (ID_SUBJECT, SUBJECT, ID_TEACHER) VALUES (2, 'Физика', 7);
INSERT INTO SUBJECTS (ID_SUBJECT, SUBJECT, ID_TEACHER) VALUES (3, 'Иностранный язык', 3);
INSERT INTO SUBJECTS (ID_SUBJECT, SUBJECT, ID_TEACHER) VALUES (4, 'Физическая культура', 8);
INSERT INTO SUBJECTS (ID_SUBJECT, SUBJECT, ID_TEACHER) VALUES (5, 'Информационные технологии', 4);
INSERT INTO SUBJECTS (ID_SUBJECT, SUBJECT, ID_TEACHER) VALUES (6, 'Компьютерные сети', 5);
INSERT INTO SUBJECTS (ID_SUBJECT, SUBJECT, ID_TEACHER) VALUES (7, 'Компьютерная графика', 2);
INSERT INTO SUBJECTS (ID_SUBJECT, SUBJECT, ID_TEACHER) VALUES (8, 'Безопасность жизнедеятельности', 6);

COMMIT WORK;

INSERT INTO THEME_T (ID_THEME, NAME_THEME, ID_SUBJECT) VALUES (1, 'Легкая атлетика', 4);

COMMIT WORK;

INSERT INTO TEST_T (TEST_T, NAME_TEST, ID_THEME) VALUES (1, 'Промежуточная аттестация', 1);

COMMIT WORK;

INSERT INTO QUESTIONS (ID_QUESTION, ID_TEST, QUESTION) VALUES (1, 1, 'В каком году состоялся первый в России чемпионат по легкой атлетике?');
INSERT INTO QUESTIONS (ID_QUESTION, ID_TEST, QUESTION) VALUES (2, 1, 'Длина стандартной беговой дорожки?');
INSERT INTO QUESTIONS (ID_QUESTION, ID_TEST, QUESTION) VALUES (3, 1, 'Какие дистанции относятся к спринтерский (коротким)?');
INSERT INTO QUESTIONS (ID_QUESTION, ID_TEST, QUESTION) VALUES (4, 1, 'Прыжок в длину с разбега?');
INSERT INTO QUESTIONS (ID_QUESTION, ID_TEST, QUESTION) VALUES (5, 1, 'Прыжок в высоту?');
INSERT INTO QUESTIONS (ID_QUESTION, ID_TEST, QUESTION) VALUES (6, 1, 'Сколько попыток используется при прыжках?');
INSERT INTO QUESTIONS (ID_QUESTION, ID_TEST, QUESTION) VALUES (7, 1, 'Какой старт используется при беге на короткие дистанции?');
INSERT INTO QUESTIONS (ID_QUESTION, ID_TEST, QUESTION) VALUES (8, 1, 'На сколько "фаз" делится прыжок в длину с разбега?');

COMMIT WORK;

INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (1, '1902г', 0, 1);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (2, '1906г', 0, 1);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (3, '1908г', 1, 1);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (4, '1900г', 0, 1);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (5, '400м', 1, 2);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (6, '330м', 0, 2);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (7, '100м', 0, 2);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (8, '500м', 0, 2);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (9, '800м, 1500м', 0, 3);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (10, '60м, 100м, 200м, 400м', 1, 3);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (11, '2000м, 3000м, 5000м', 0, 3);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (12, 'Способом "согнув ноги"', 1, 4);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (13, '"Перекат"', 0, 4);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (14, 'Способ "перешагивание"', 0, 4);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (15, 'Способ "прогнувшись"', 0, 5);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (16, 'Способ "перекидной"', 1, 5);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (17, 'Способ "согнув ноги"', 0, 5);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (18, 'Одна', 0, 6);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (19, 'Пять', 0, 6);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (20, 'Три', 1, 6);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (21, 'Средний старт', 0, 7);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (22, 'Высокий старт', 0, 7);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (23, 'Низкий старт', 1, 7);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (24, 'Две', 0, 8);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (25, 'Три', 0, 8);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (26, 'Пять', 0, 8);
INSERT INTO ANSWERS (ID_ANSWER, ANSWER, TRUE_ANSWER, ID_QUESTIONS) VALUES (27, 'Четыре', 1, 8);

COMMIT WORK;

INSERT INTO GROUPS (ID_GROUP, NAME_GROUP) VALUES (1, '2-СА-2');
INSERT INTO GROUPS (ID_GROUP, NAME_GROUP) VALUES (2, '2-ИС-2');
INSERT INTO GROUPS (ID_GROUP, NAME_GROUP) VALUES (3, '2-Р-19');
INSERT INTO GROUPS (ID_GROUP, NAME_GROUP) VALUES (4, '1-СА-3');

COMMIT WORK;

INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (1, 'Громов', 'Олег', 'Андреевич      ', 'Grom_gromov0', 'g87263fad', 1);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (2, 'Агатьева', 'Алина', 'Юрьевна        ', 'Agat_A12', 'ag5453a', 2);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (4, 'Васильев', 'Иван', 'Юрьевич        ', 'Vasilev2021', 'vas92137', 3);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (5, 'Борисова', 'Екатерина', 'Андреевна      ', 'Borisova_k10', 'bor87gd2a2', 4);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (6, 'Кузнецов', 'Денис', 'Никитич        ', 'Kyz_k4321', 'jfads6127fs', 4);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (7, 'Лебедев', 'Виктор', 'Геннадьевич    ', 'lebedevv', 'hgs53jds', 3);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (8, 'Морозов', 'Роман', 'Игоревич       ', 'morozrman1', '6123hd12d', 2);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (10, 'Попова', 'Марина', 'Владимировна   ', 'popovamaAs', 'hafd1921d', 2);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (11, 'Соколов', 'Никита', 'Александрович  ', 'sokolovs12fd', 'hmafhkl721', 3);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (12, 'Козлов', 'Станислав', 'Дмитриевич     ', 'kozsta3', 'dada88d', 4);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (13, 'Павлова', 'Ирина', 'Никитична      ', 'pavlovaIra', 'iuowqeb', 3);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (14, 'Степанова', 'Юлия', 'Алексеевна     ', 'stepanovaS', 'vcxnfd12', 2);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (15, 'Волкова', 'Ксения', 'Ильинична      ', 'volkovaKs', 'nmvkjds', 1);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (16, 'Алексеева', 'Наталья', 'Александровна  ', 'alekseeva', 'alek098', 4);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (17, 'Топорова', 'Марина', 'Сергеевна      ', 'toporMar', 'mar51gs', 2);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (18, 'Лесиков', 'Алексей', 'Михайлович     ', 'lesikLes', 'bra8432ki', 3);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (19, 'Новиков', 'Дмитрий', 'Евгеньевич     ', 'NovikovDima', 'hsdvxc45', 1);
INSERT INTO STUDENTS (ID_STUDENT, SURNAME_STUDENT, NAME_STUDENT, PATRONYMIC_STUDENT, LOGIN, PASSWORDD, ID_GROUP) VALUES (20, 'Ансимова', 'Елизавета', 'Андреевна      ', 'liza_l', 'lizaaa9', 3);

COMMIT WORK;

INSERT INTO REGISTRATION (ID_REGISTRATION, START_TIME, END_TIME, THE_DATE_OF_THE, ID_STUDENT) VALUES (1, '10:00:00.000', '11:15:30.000', '2021-05-18', 4);

COMMIT WORK;

INSERT INTO TEACHERS (ID_TEACHER, SURNAME_TEACHER, NAME_TEACHER, PATRONYMIC_TEACHER, LOGIN, PASSWORDD) VALUES (1, 'Сидорова', 'Елена', 'Федоровна', 'Sidorova_fed1', '123sid321fed');
INSERT INTO TEACHERS (ID_TEACHER, SURNAME_TEACHER, NAME_TEACHER, PATRONYMIC_TEACHER, LOGIN, PASSWORDD) VALUES (2, 'Петрова', 'Маргарита', 'Николаевна', 'Petrova_mar1', '1m2a3rgaritaа');
INSERT INTO TEACHERS (ID_TEACHER, SURNAME_TEACHER, NAME_TEACHER, PATRONYMIC_TEACHER, LOGIN, PASSWORDD) VALUES (3, 'Иванов', 'Петр', 'Алексеевич', 'Ivanov_pet1', 'petr2399');
INSERT INTO TEACHERS (ID_TEACHER, SURNAME_TEACHER, NAME_TEACHER, PATRONYMIC_TEACHER, LOGIN, PASSWORDD) VALUES (4, 'Соколова', 'Екатерина', 'Александровна', 'Sokolova_e12', 'sokol165');
INSERT INTO TEACHERS (ID_TEACHER, SURNAME_TEACHER, NAME_TEACHER, PATRONYMIC_TEACHER, LOGIN, PASSWORDD) VALUES (5, 'Григорьева', 'Светлана', 'Степановна', 'Svetlana_st', 'stepan23451');
INSERT INTO TEACHERS (ID_TEACHER, SURNAME_TEACHER, NAME_TEACHER, PATRONYMIC_TEACHER, LOGIN, PASSWORDD) VALUES (6, 'Матвеева', 'Людмила', 'Александровна', 'Matveeva_l1', 'matveeva_ma0');
INSERT INTO TEACHERS (ID_TEACHER, SURNAME_TEACHER, NAME_TEACHER, PATRONYMIC_TEACHER, LOGIN, PASSWORDD) VALUES (7, 'Сергеева', 'Кристина', 'Олеговна', 'Sergeeva_serg09', 'ser123geeva');
INSERT INTO TEACHERS (ID_TEACHER, SURNAME_TEACHER, NAME_TEACHER, PATRONYMIC_TEACHER, LOGIN, PASSWORDD) VALUES (8, 'Миронов', 'Игорь', 'Вадимович', 'Miron_M1', 'mir2021m');

COMMIT WORK;

INSERT INTO TESTING (ID_TESTING, ID_REGISTRATION, ID_TEST, ID_ANSWER) VALUES (1, 1, 1, 3);
INSERT INTO TESTING (ID_TESTING, ID_REGISTRATION, ID_TEST, ID_ANSWER) VALUES (2, 1, 1, 5);
INSERT INTO TESTING (ID_TESTING, ID_REGISTRATION, ID_TEST, ID_ANSWER) VALUES (3, 1, 1, 10);
INSERT INTO TESTING (ID_TESTING, ID_REGISTRATION, ID_TEST, ID_ANSWER) VALUES (4, 1, 1, 12);
INSERT INTO TESTING (ID_TESTING, ID_REGISTRATION, ID_TEST, ID_ANSWER) VALUES (5, 1, 1, 16);
INSERT INTO TESTING (ID_TESTING, ID_REGISTRATION, ID_TEST, ID_ANSWER) VALUES (6, 1, 1, 20);
INSERT INTO TESTING (ID_TESTING, ID_REGISTRATION, ID_TEST, ID_ANSWER) VALUES (7, 1, 1, 23);
INSERT INTO TESTING (ID_TESTING, ID_REGISTRATION, ID_TEST, ID_ANSWER) VALUES (8, 1, 1, 27);

COMMIT WORK;



/******************************************************************************/
/****                             Primary Keys                             ****/
/******************************************************************************/

ALTER TABLE ANSWERS ADD CONSTRAINT PK_ANSWERS PRIMARY KEY (ID_ANSWER);
ALTER TABLE GROUPS ADD CONSTRAINT PK_GROUPS PRIMARY KEY (ID_GROUP);
ALTER TABLE QUESTIONS ADD CONSTRAINT PK_QUESTIONS PRIMARY KEY (ID_QUESTION);
ALTER TABLE REGISTRATION ADD CONSTRAINT PK_REGISTRATION PRIMARY KEY (ID_REGISTRATION);
ALTER TABLE STUDENTS ADD CONSTRAINT PK_STUDENTS PRIMARY KEY (ID_STUDENT);
ALTER TABLE SUBJECTS ADD CONSTRAINT PK_SUBJECTS PRIMARY KEY (ID_SUBJECT);
ALTER TABLE TEACHERS ADD CONSTRAINT PK_TEACHERS PRIMARY KEY (ID_TEACHER);
ALTER TABLE TESTING ADD CONSTRAINT PK_TESTING PRIMARY KEY (ID_TESTING);
ALTER TABLE TEST_T ADD CONSTRAINT PK_TEST_T PRIMARY KEY (TEST_T);
ALTER TABLE THEME_T ADD CONSTRAINT PK_THEME_T PRIMARY KEY (ID_THEME);


/******************************************************************************/
/****                             Foreign Keys                             ****/
/******************************************************************************/

ALTER TABLE ANSWERS ADD CONSTRAINT FK_ANSWERS_2 FOREIGN KEY (ID_QUESTIONS) REFERENCES QUESTIONS (ID_QUESTION);
ALTER TABLE QUESTIONS ADD CONSTRAINT FK_QUESTIONS_2 FOREIGN KEY (ID_TEST) REFERENCES TEST_T (TEST_T);
ALTER TABLE REGISTRATION ADD CONSTRAINT FK_REGISTRATION_2 FOREIGN KEY (ID_STUDENT) REFERENCES STUDENTS (ID_STUDENT);
ALTER TABLE STUDENTS ADD CONSTRAINT FK_STUDENTS_2 FOREIGN KEY (ID_GROUP) REFERENCES GROUPS (ID_GROUP);
ALTER TABLE SUBJECTS ADD CONSTRAINT FK_SUBJECTS_2 FOREIGN KEY (ID_TEACHER) REFERENCES TEACHERS (ID_TEACHER);
ALTER TABLE TESTING ADD CONSTRAINT FK_TESTING_2 FOREIGN KEY (ID_REGISTRATION) REFERENCES REGISTRATION (ID_REGISTRATION);
ALTER TABLE TESTING ADD CONSTRAINT FK_TESTING_3 FOREIGN KEY (ID_TEST) REFERENCES TEST_T (TEST_T);
ALTER TABLE TESTING ADD CONSTRAINT FK_TESTING_4 FOREIGN KEY (ID_ANSWER) REFERENCES ANSWERS (ID_ANSWER);
ALTER TABLE TEST_T ADD CONSTRAINT FK_TEST_T_2 FOREIGN KEY (ID_THEME) REFERENCES THEME_T (ID_THEME);
ALTER TABLE THEME_T ADD CONSTRAINT FK_THEME_T_2 FOREIGN KEY (ID_SUBJECT) REFERENCES SUBJECTS (ID_SUBJECT);


/******************************************************************************/
/****                               Triggers                               ****/
/******************************************************************************/


SET TERM ^ ;


/******************************************************************************/
/****                         Triggers for tables                          ****/
/******************************************************************************/



/* Trigger: ANSWERS_BI */
CREATE TRIGGER ANSWERS_BI FOR ANSWERS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_ANSWER IS NULL) THEN
    NEW.ID_ANSWER = GEN_ID(GEN_ANSWERS_ID,1);
END
^

/* Trigger: GROUPS_BI */
CREATE TRIGGER GROUPS_BI FOR GROUPS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_GROUP IS NULL) THEN
    NEW.ID_GROUP = GEN_ID(GEN_GROUPS_ID,1);
END
^

/* Trigger: QUESTIONS_BI */
CREATE TRIGGER QUESTIONS_BI FOR QUESTIONS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_QUESTION IS NULL) THEN
    NEW.ID_QUESTION = GEN_ID(GEN_QUESTIONS_ID,1);
END
^

/* Trigger: REGISTRATION_BI */
CREATE TRIGGER REGISTRATION_BI FOR REGISTRATION
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_REGISTRATION IS NULL) THEN
    NEW.ID_REGISTRATION = GEN_ID(GEN_REGISTRATION_ID,1);
END
^

/* Trigger: STUDENTS_BI */
CREATE TRIGGER STUDENTS_BI FOR STUDENTS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_STUDENT IS NULL) THEN
    NEW.ID_STUDENT = GEN_ID(GEN_STUDENTS_ID,1);
END
^

/* Trigger: SUBJECTS_BI */
CREATE TRIGGER SUBJECTS_BI FOR SUBJECTS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_SUBJECT IS NULL) THEN
    NEW.ID_SUBJECT = GEN_ID(GEN_SUBJECTS_ID,1);
END
^

/* Trigger: TEACHERS_BI */
CREATE TRIGGER TEACHERS_BI FOR TEACHERS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_TEACHER IS NULL) THEN
    NEW.ID_TEACHER = GEN_ID(GEN_TEACHERS_ID,1);
END
^

/* Trigger: TESTING_BI */
CREATE TRIGGER TESTING_BI FOR TESTING
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_TESTING IS NULL) THEN
    NEW.ID_TESTING = GEN_ID(GEN_TESTING_ID,1);
END
^

/* Trigger: TEST_T_BI */
CREATE TRIGGER TEST_T_BI FOR TEST_T
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.TEST_T IS NULL) THEN
    NEW.TEST_T = GEN_ID(GEN_TEST_T_ID,1);
END
^

/* Trigger: THEME_T_BI */
CREATE TRIGGER THEME_T_BI FOR THEME_T
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_THEME IS NULL) THEN
    NEW.ID_THEME = GEN_ID(GEN_THEME_T_ID,1);
END
^

SET TERM ; ^



/******************************************************************************/
/****                          Stored Procedures                           ****/
/******************************************************************************/


SET TERM ^ ;

ALTER PROCEDURE CHECK_BO (
    ID_STUDENT INTEGER)
RETURNS (
    USED INTEGER)
AS
declare variable cnt integer;
begin
  select count(*)
   from registration r
   where (r.id_student = :id_student)
   into :CNT;
   if (CNT > 0) then
   begin
      USED = 1;
      suspend;
      exit;
   end

   USED = 0;
   suspend;
end
^

ALTER PROCEDURE CHECK_GRO (
    ID_GROUP INTEGER)
RETURNS (
    USED INTEGER)
AS
declare variable cnt integer;
begin
  select count(*)
   from students g
   where (g.id_group = :id_group)
   into :CNT;
   if (CNT > 0) then
   begin
      USED = 1;
      suspend;
      exit;
   end

   USED = 0;
   suspend;
end
^

ALTER PROCEDURE CHECK_PRE (
    ID_TEACHER INTEGER)
RETURNS (
    USED INTEGER)
AS
declare variable cnt integer;
begin
  select count(*)
   from subjects s
   where (s.id_teacher = :id_teacher)
   into :CNT;
   if (CNT > 0) then
   begin
      USED = 1;
      suspend;
      exit;
   end

   USED = 0;
   suspend;
end
^

ALTER PROCEDURE CHECK_SUB (
    ID_SUBJECT INTEGER)
RETURNS (
    USED INTEGER)
AS
declare variable cnt integer;
begin
  select count(*)
   from theme_t t
   where (t.id_subject = :id_subject)
   into :CNT;
   if (CNT > 0) then
   begin
      USED = 1;
      suspend;
      exit;
   end

   USED = 0;
   suspend;
end
^

ALTER PROCEDURE SP_GEN_ANSWERS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  ID = GEN_ID(GEN_ANSWERS_ID, 1);
  SUSPEND;
END
^

ALTER PROCEDURE SP_GEN_GROUPS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  ID = GEN_ID(GEN_GROUPS_ID, 1);
  SUSPEND;
END
^

ALTER PROCEDURE SP_GEN_QUESTIONS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  ID = GEN_ID(GEN_QUESTIONS_ID, 1);
  SUSPEND;
END
^

ALTER PROCEDURE SP_GEN_STUDENTS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  ID = GEN_ID(GEN_STUDENTS_ID, 1);
  SUSPEND;
END
^

ALTER PROCEDURE SP_GEN_SUBJECTS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  ID = GEN_ID(GEN_SUBJECTS_ID, 1);
  SUSPEND;
END
^

ALTER PROCEDURE SP_GEN_TEACHERS_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  ID = GEN_ID(GEN_TEACHERS_ID, 1);
  SUSPEND;
END
^

ALTER PROCEDURE SP_GEN_TEST_T_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  ID = GEN_ID(GEN_TEST_T_ID, 1);
  SUSPEND;
END
^

ALTER PROCEDURE SP_GEN_THEME_T_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  ID = GEN_ID(GEN_THEME_T_ID, 1);
  SUSPEND;
END
^


SET TERM ; ^
